{"version":3,"sources":["like.png","Likes.js","Scard.js","View.js","Add.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Likes","event","console","log","this","props","postId","likeaction","Table","Image","onClick","clickHandler","fluid","className","src","LikeIcon","width","alt","no","React","Component","Scard","Card","Header","as","id","img","Body","Text","text","likes","View","posts","map","current","i","key","postid","buildPosts","href","title","Add","state","toastr","options","closeButton","debug","extendedTimeOut","hideDuration","hideEasing","hideMethod","newestOnTop","onclick","positionClass","preventDuplicates","progressBar","showDuration","showEasing","showMethod","timeOut","clear","lastid","setState","newState","target","name","value","preventDefault","newId","onsubmit","success","Form","onSubmit","e","submitHandler","Group","controlId","Label","Control","type","onChange","handleChange","placeholder","Button","variant","App","undefined","listContents","localStorage","getItem","postValue","JSON","parse","length","postItem","concat","setItem","stringify","post","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","to","Container","path","updateListItems","exact","addLike","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7d515d97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/like.e0756cdb.png\";","import React from 'react';\nimport Image from 'react-bootstrap/Image'\nimport Table from 'react-bootstrap/Table'\nimport LikeIcon from './like.png'\n\nclass Likes extends React.Component {\n\n  clickHandler(event) {\n    console.log(this.props.postId)\n    this.props.likeaction(this.props.postId);\n  }\n\n  render() {\n    return (\n      <>\n        <Table>\n          <tbody>\n            <tr>\n              <td>\n                <Image onClick={() => this.clickHandler()} fluid className=\"mx-auto\" src={LikeIcon} width=\"25px\" alt=\"like logo\" />\n              </td>\n              <td>\n                {this.props.no}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n}\n\nexport default Likes;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Image from 'react-bootstrap/Image'\nimport Likes from './Likes'\n\nclass Scard extends React.Component {\n\n  render() {\n    return (\n      <>\n        <Card className=\"mx-auto text-center mt-2\">\n          <Card.Header as=\"h5\">@{this.props.id}</Card.Header>\n          <Image fluid className=\"mx-auto\" src={this.props.img} alt={this.props.alt} />\n          <Card.Body>\n            <Card.Text>{this.props.text}</Card.Text>\n            <Likes no={this.props.likes} likeaction={this.props.likeaction} postId={this.props.postId} />\n          </Card.Body>\n        </Card>\n      </>\n    );\n  }\n}\n\nexport default Scard;","import React from 'react';\nimport './App.css';\nimport Scard from './Scard';\n\nclass View extends React.Component {\n\n  buildPosts() {\n    return this.props.posts.map((current,i) => (\n      <Scard key={i} postId={current.postid} id={current.id} img={current.img} text={current.text} likes={current.likes} likeaction={this.props.likeaction} />\n    )\n    )\n  }\n\n  render() {\n    return (\n      <>\n        <div>\n          {this.buildPosts()}\n        </div>\n        <div id=\"att\">Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a></div>\n      </>\n    );\n  }\n}\n\nexport default View;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport toastr from 'toastr';\nimport 'toastr/build/toastr.min.css'\n\nclass Add extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      postId: 0,\n      id: \"\",\n      text: \"\",\n      img: \"\",\n    }\n    toastr.options = {\n      closeButton: true,\n      debug: false,\n      extendedTimeOut: \"1000\",\n      hideDuration: \"1000\",\n      hideEasing: \"linear\",\n      hideMethod: \"fadeOut\",\n      newestOnTop: false,\n      onclick: null,\n      positionClass: \"toast-top-full-width\",\n      preventDuplicates: true,\n      progressBar: true,\n      showDuration: \"300\",\n      showEasing: \"swing\",\n      showMethod: \"fadeIn\",\n      timeOut: \"5000\",\n    };\n    toastr.clear();\n  }\n\n  componentDidMount() {\n    console.log(this.props.lastid)\n    this.setState({\n      postId: this.props.lastid\n    })\n  }\n\n  handleChange(event) {\n    const newState = {};\n    newState[event.target.name] = event.target.value;\n    this.setState(newState);\n  }\n\n  submitHandler(event) {\n    event.preventDefault();\n    const newId = this.state.postId + 1\n    console.log(newId)\n    this.props.onsubmit(newId, this.state.id, this.state.text, this.state.img, 0);\n    toastr.success(\"post added\");\n    this.setState({\n      postId: newId,\n      id: \"\",\n      text: \"\",\n      img: \"\",\n      likes: 0\n    }, console.log(this.state))\n  }\n\n\n  render() {\n    return (\n      <>\n        <Form onSubmit={(e) => this.submitHandler(e)} >\n          <Form.Group controlId=\"userID\">\n            <Form.Label>User ID</Form.Label>\n            <Form.Control name=\"id\" type=\"text\" value={this.state.id} onChange={(e) => this.handleChange(e)} />\n          </Form.Group>\n\n          <Form.Group controlId=\"text\">\n            <Form.Label>Text</Form.Label>\n            <Form.Control name=\"text\" type=\"text\" value={this.state.text} placeholder=\"text\" onChange={(e) => this.handleChange(e)} />\n          </Form.Group>\n\n          <Form.Group controlId=\"img\">\n            <Form.Label>Image Address</Form.Label>\n            <Form.Control name=\"img\" type=\"text\" value={this.state.img} placeholder=\"insert url for image\" onChange={(e) => this.handleChange(e)} />\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\">\n            Add Post\n  </Button>\n        </Form>\n      </>\n    );\n  }\n\n}\nexport default Add;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport './App.css';\nimport View from './View'\nimport Add from './Add'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      posts: [],\n      postId: undefined\n    }\n  }\n\n  componentDidMount() {\n    const listContents = localStorage.getItem(\"posts\");\n    let postValue = 0\n    if(listContents) {\n      postValue = (JSON.parse(listContents)[JSON.parse(listContents).length -1].postid) \n    }\n     \n    this.setState(\n      { posts: JSON.parse(listContents) || [],\n        postId: postValue\n      }\n    )\n  }\n\n  updateListItems(postid, id, text, img, likes) {\n    const postItem = { postid, id, text, img, likes }\n    this.setState((state) => ({\n      posts: state.posts.concat(postItem)\n    }), () => localStorage.setItem(\"posts\", JSON.stringify(this.state.posts)))\n  }\n\n  addLike(id) {\n\n    this.setState((state) => ({\n      posts: state.posts.map(\n        post => post.postid === id ? { ...post, likes: post.likes +1 } : post\n      )\n    }), () => localStorage.setItem(\"posts\", JSON.stringify(this.state.posts)))\n  }\n\n  render() {\n    return (\n      <Router>\n\n        <Navbar bg=\"primary\" expand=\"md\">\n          <Navbar.Brand>FaceAche™</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Link className=\"nav-link\" to=\"/\">View</Link>\n              <Link className=\"nav-link\" to=\"/add\">Add</Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        <Container>\n          <Switch>\n            <Route path=\"/add\">\n              <Add onsubmit={(postid, id, text, img, likes) => this.updateListItems(postid, id, text, img, likes)} lastid={this.state.postId} />\n            </Route>\n            <Route exact path=\"/\">\n              <View posts={this.state.posts} likeaction={(id) => this.addLike(id)} />\n            </Route>\n            <Route path=\"/\">\n              Error: 404 not found\n            </Route>\n          </Switch>\n\n        </Container>\n\n      </Router>\n\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}